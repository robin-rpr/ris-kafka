services:
    # Amsterdam, RIPE NCC, global
    rrc00:
        &base_app
        build: .
        # image: robinrpr/ris-kafka:latest
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        mem_limit: 500m # Maximum memory limit
        mem_reservation: 200m # Reserve 200m of memory
        cpus: "0.25" # Reserve 0.25 CPU
        environment:
            &base_app_environment
            KAFKA_FQDN: kafka:29092
            LOG_LEVEL: INFO
            ENABLE_PROFILING: false # Enable profiling (outputs to a profiles/ directory)
            BUFFER_SIZE: 10000 # Size of the buffer where messages are buffered before sending
            BUFFER_PADDING: 100 # Padding in the buffer to ensure safe eventual consistency in order
            TIME_LAG_LIMIT: 10 # Maximum Time lag limit in minutes. If exceeded, the process will terminate.
            BATCH_CONSUME: 1000 # Number of messages to consume in one round from websocket
            BATCH_SEND: 10000 # Number of messages to send in one round to kafka
            REDIS_MAX_CONNECTIONS: 50 # Maximum number of connections to redis
            RIS_HOST: rrc00
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_DB: 0
        depends_on:
            &base_app_depends_on
            redis:
                condition: service_healthy
            kafka:
                condition: service_healthy
        working_dir: /app
        volumes:
            - .:/app
        entrypoint: >
            python app.py
    
    # London, LINX/LONAP, regional
    rrc01:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc01
        depends_on:
            <<: *base_app_depends_on
            rrc00:
                condition: service_started
        entrypoint: >
            sleep 10
            python app.py

    # Amsterdam, AMS-IX/NL-IX, regional
    rrc03:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc03
        depends_on:
            <<: *base_app_depends_on
            rrc01:
                condition: service_started
        entrypoint: >
            sleep 20
            python app.py

    # Geneva, CERN, regional
    rrc04:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc04
        depends_on:
            <<: *base_app_depends_on
            rrc03:
                condition: service_started
        entrypoint: >
            sleep 30
            python app.py

    # Vienna, VIX, regional
    rrc05:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc05
        depends_on:
            <<: *base_app_depends_on
            rrc04:
                condition: service_started
        entrypoint: >
            sleep 40
            python app.py

    # Otemachi, RIPE NCC, regional
    rrc06:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc06
        depends_on:
            <<: *base_app_depends_on
            rrc05:
                condition: service_started
        entrypoint: >
            sleep 50
            python app.py

    # Stockholm, Netnod, regional
    rrc07:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc07
        depends_on:
            <<: *base_app_depends_on
            rrc06:
                condition: service_started
        entrypoint: >
            sleep 60
            python app.py

    # Milan, MIX, regional
    rrc10:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc10
        depends_on:
            <<: *base_app_depends_on
            rrc07:
                condition: service_started
        entrypoint: >
            sleep 70
            python app.py

    # New York, Telehouse/GTT, regional
    rrc11:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc11
        depends_on:
            <<: *base_app_depends_on
            rrc10:
                condition: service_started
        entrypoint: >
            sleep 80
            python app.py

    # Frankfurt, DE-CIX, regional
    rrc12:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc12
        depends_on:
            <<: *base_app_depends_on
            rrc11:
                condition: service_started
        entrypoint: >
            sleep 90
            python app.py

    # Moscow, MSK-IX, regional
    rrc13:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc13
        depends_on:
            <<: *base_app_depends_on
            rrc12:
                condition: service_started
        entrypoint: >
            sleep 100
            python app.py

    # Palo Alto, Equinix, regional
    rrc14:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc14
        depends_on:
            <<: *base_app_depends_on
            rrc13:
                condition: service_started
        entrypoint: >
            sleep 110
            python app.py

    # Sao Paulo, IX.br, regional
    rrc15:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc15
        depends_on:
            <<: *base_app_depends_on
            rrc14:
                condition: service_started
        entrypoint: >
            sleep 120
            python app.py

    # Miami, RIPE NCC, regional
    rrc16:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc16
        depends_on:
            <<: *base_app_depends_on
            rrc15:
                condition: service_started
        entrypoint: >
            sleep 130
            python app.py

    # Barcelona, CATNIX, regional
    rrc18:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc18
        depends_on:
            <<: *base_app_depends_on
            rrc16:
                condition: service_started
        entrypoint: >
            sleep 140
            python app.py

    # Johannesburg, Network Platforms, regional
    rrc19:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc19
        depends_on:
            <<: *base_app_depends_on
            rrc18:
                condition: service_started
        entrypoint: >
            sleep 150
            python app.py

    # Zurich, SWISS-IX, regional
    rrc20:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc20
        depends_on:
            <<: *base_app_depends_on
            rrc19:
                condition: service_started
        entrypoint: >
            sleep 160
            python app.py

    # Paris, France-IX, regional
    rrc21:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc21
        depends_on:
            <<: *base_app_depends_on
            rrc20:
                condition: service_started
        entrypoint: >
            sleep 170
            python app.py

    # Bucharest, InterLAN, regional
    rrc22:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc22
        depends_on:
            <<: *base_app_depends_on
            rrc21:
                condition: service_started
        entrypoint: >
            sleep 180
            python app.py

    # Singapore, Equinix, regional
    rrc23:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc23
        depends_on:
            <<: *base_app_depends_on
            rrc22:
                condition: service_started
        entrypoint: >
            sleep 190
            python app.py

    # Montevideo, LACNIC, global
    rrc24:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc24
        depends_on:
            <<: *base_app_depends_on
            rrc23:
                condition: service_started
        entrypoint: >
            sleep 200
            python app.py

    # Amsterdam, RIPE NCC, global
    rrc25:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc25
        depends_on:
            <<: *base_app_depends_on
            rrc24:
                condition: service_started
        entrypoint: >
            sleep 210
            python app.py

    # Dubai, Datamena/UAE-IX, regional
    rrc26:
        <<: *base_app
        environment:
            <<: *base_app_environment
            RIS_HOST: rrc26
        depends_on:
            <<: *base_app_depends_on
            rrc25:
                condition: service_started
        entrypoint: >
            sleep 220
            python app.py

    redis:
        image: redis:latest
        restart: unless-stopped
        healthcheck:
            test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
            interval: 30s
            timeout: 60s
            retries: 10
        volumes:
            - redis_data:/data
        ports:
            - "6379:6379"
        environment:
            - ALLOW_EMPTY_PASSWORD=yes

    zookeeper:
        image: confluentinc/cp-zookeeper:7.7.1
        restart: unless-stopped
        volumes:
            - zookeeper_data:/var/lib/zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    kafka:
        image: confluentinc/cp-kafka:7.7.1
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:29092"]
            interval: 30s
            timeout: 60s
            retries: 10
        volumes:
            - kafka_data:/var/lib/kafka/data
        ports:
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://example.com:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_NUM_PARTITIONS: 1
            KAFKA_LOG_RETENTION_HOURS: 48
            KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 600000
            KAFKA_LOG_ROLL_MS: 3600000
            KAFKA_LOG_SEGMENT_BYTES: 1073741824 # 1GB
            KAFKA_MESSAGE_MAX_BYTES: 100000000
            KAFKA_LOG_CLEANER_THREADS: 2
            KAFKA_COMPRESSION_TYPE: lz4
            KAFKA_NUM_NETWORK_THREADS: 8
            KAFKA_NUM_IO_THREADS: 8

    kafbat:
        image: ghcr.io/kafbat/kafka-ui:latest
        restart: unless-stopped
        ports:
            - 8080:8080
        depends_on:
            kafka:
                condition: service_healthy
        environment:
            KAFKA_CLUSTERS_0_NAME: ris-kafka
            KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:29092
            KAFKA_CLUSTERS_0_READONLY: true

# Define volumes
volumes:
    zookeeper_data:
    kafka_data:
    redis_data: