version: '3'
services:
    rrc00:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc00
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc00_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc01:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc01
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc01_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc03:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc03
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc03_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc04:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc04
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc04_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc05:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc05
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc05_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc06:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc06
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc06_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc07:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc07
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc07_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc10:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc10
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc10_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc11:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc11
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc11_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc12:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc12
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc12_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc13:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc13
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc13_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc14:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc14
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc14_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc15:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc15
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc15_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc16:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc16
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc16_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc18:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc18
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc18_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc19:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc19
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc19_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc20:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc20
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc20_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc21:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc21
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc21_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc22:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc22
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc22_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc23:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc23
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc23_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc24:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc24
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc24_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc25:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc25
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc25_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    rrc26:
        image: robinrpr/ris-kafka:1.0.20
        deploy:
            replicas: 2
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-rrc == 1
        restart: unless-stopped
        stop_signal: SIGTERM  # Wind down collector safely before stopping
        stop_grace_period: 20s # Wait for 20 seconds before forcefully stopping
        environment:
            RRC_ZOOKEEPER_CONNECT: zookeeper:2181
            RRC_KAFKA_CONNECT: kafka:29092
            RRC_BACKUP_SIZE: 350000
            RRC_QUEUE_SIZE: 100000
            RRC_BATCH_SIZE: 10000
            RRC_LOG_LEVEL: INFO
            RRC_HOST: rrc26
        depends_on:
            - kafbat
            - kafka
            - zookeeper
        working_dir: /app
        volumes:
            - rrc26_data:/var/lib/rocksdb
        entrypoint: >
            python app.py
    
    
    zookeeper:
        image: confluentinc/cp-zookeeper:7.7.1
        restart: unless-stopped
        deploy:
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.labels.ris-kafka-zookeeper == 1
        healthcheck:
            test: ["CMD-SHELL", "nc -z localhost 2181 || exit -1"]
            interval: 30s
            timeout: 10s
            retries: 5
        volumes:
            - zookeeper_data:/var/lib/zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    kafka:
        image: confluentinc/cp-kafka:7.7.1
        restart: unless-stopped
        deploy:
            placement:
                constraints:
                    - node.labels.ris-kafka-kafka == 1
            restart_policy:
                condition: any
        depends_on:
            - zookeeper
        volumes:
            - kafka_data:/var/lib/kafka/data
        ports:
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://example.com:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_NUM_PARTITIONS: 1
            KAFKA_LOG_RETENTION_HOURS: 48
            KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 600000
            KAFKA_LOG_ROLL_MS: 3600000
            KAFKA_LOG_SEGMENT_BYTES: 1073741824 # 1GB
            KAFKA_MESSAGE_MAX_BYTES: 100000000
            KAFKA_LOG_CLEANER_THREADS: 2
            KAFKA_COMPRESSION_TYPE: lz4
            KAFKA_NUM_NETWORK_THREADS: 24
            KAFKA_NUM_IO_THREADS: 24

    acl:
        image: confluentinc/cp-kafka:latest
        depends_on:
            - kafka
        restart: unless-stopped
        deploy:
            restart_policy:
                condition: on-failure
        command:
            - /bin/sh
            - -c
            - |
                sleep 300 && \
                kafka-acls --bootstrap-server kafka:29092 \
                            --add --allow-principal User:ANONYMOUS \
                            --operation Read \
                            --topic '*' \
                            --group '*' \
                            --allow-host '*' &&
                kafka-acls --bootstrap-server kafka:29092 \
                            --add --allow-principal User:ANONYMOUS \
                            --operation Write \
                            --topic '*' \
                            --allow-host '*'

    kafbat:
        image: ghcr.io/kafbat/kafka-ui:latest
        restart: unless-stopped
        deploy:
            restart_policy:
                condition: any
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.riskafka.rule=Host(`ris-kafka.com`)"
                - "traefik.http.routers.riskafka.entrypoints=websecure"
                - "traefik.http.routers.riskafka.tls.certresolver=riskafka"
                - "traefik.http.services.riskafka.loadbalancer.server.port=8080"
        depends_on:
            - kafka
        environment:
            KAFKA_CLUSTERS_0_NAME: ris-kafka
            KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:29092
            KAFKA_CLUSTERS_0_READONLY: "true"

    traefik:
        image: traefik:v2.4
        ports:
            - "80:80"
            - "443:443"
        deploy:
            restart_policy:
                condition: any
            placement:
                constraints:
                    - node.role == manager
        entrypoint:
            - sh
            - -c
        command: >
            "touch /data/acme.json && chmod 600 /data/acme.json && traefik \
            --entrypoints.web.address=:80 \
            --entrypoints.websecure.address=:443 \
            --providers.docker.swarmMode=true \
            --providers.docker.exposedbydefault=false \
            --certificatesresolvers.riskafka.acme.httpchallenge.entrypoint=web \
            --certificatesresolvers.riskafka.acme.email=hostmaster@ris-kafka.com \
            --certificatesresolvers.riskafka.acme.storage=/data/acme.json"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - traefik_data:/data

# Define volumes
volumes:
    zookeeper_data:
    traefik_data:
    kafka_data:
    rrc00_data:
    rrc01_data:
    rrc03_data:
    rrc04_data:
    rrc05_data:
    rrc06_data:
    rrc07_data:
    rrc10_data:
    rrc11_data:
    rrc12_data:
    rrc13_data:
    rrc14_data:
    rrc15_data:
    rrc16_data:
    rrc18_data:
    rrc19_data:
    rrc20_data:
    rrc21_data:
    rrc22_data:
    rrc23_data:
    rrc24_data:
    rrc25_data:
    rrc26_data: